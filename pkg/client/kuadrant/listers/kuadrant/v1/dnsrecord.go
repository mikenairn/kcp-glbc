// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNSRecordLister helps list DNSRecords.
// All objects returned here must be treated as read-only.
type DNSRecordLister interface {
	// List lists all DNSRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DNSRecord, err error)
	// ListWithContext lists all DNSRecords in the indexer.
	// Objects returned here must be treated as read-only.
	ListWithContext(ctx context.Context, selector labels.Selector) (ret []*v1.DNSRecord, err error)
	// DNSRecords returns an object that can list and get DNSRecords.
	DNSRecords(namespace string) DNSRecordNamespaceLister
	DNSRecordListerExpansion
}

// dNSRecordLister implements the DNSRecordLister interface.
type dNSRecordLister struct {
	indexer cache.Indexer
}

// NewDNSRecordLister returns a new DNSRecordLister.
func NewDNSRecordLister(indexer cache.Indexer) DNSRecordLister {
	return &dNSRecordLister{indexer: indexer}
}

// List lists all DNSRecords in the indexer.
func (s *dNSRecordLister) List(selector labels.Selector) (ret []*v1.DNSRecord, err error) {
	return s.ListWithContext(context.Background(), selector)
}

// ListWithContext lists all DNSRecords in the indexer.
func (s *dNSRecordLister) ListWithContext(ctx context.Context, selector labels.Selector) (ret []*v1.DNSRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DNSRecord))
	})
	return ret, err
}

// DNSRecords returns an object that can list and get DNSRecords.
func (s *dNSRecordLister) DNSRecords(namespace string) DNSRecordNamespaceLister {
	return dNSRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNSRecordNamespaceLister helps list and get DNSRecords.
// All objects returned here must be treated as read-only.
type DNSRecordNamespaceLister interface {
	// List lists all DNSRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DNSRecord, err error)
	// Get retrieves the DNSRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DNSRecord, error)
	DNSRecordNamespaceListerExpansion
}

// dNSRecordNamespaceLister implements the DNSRecordNamespaceLister
// interface.
type dNSRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNSRecords in the indexer for a given namespace.
func (s dNSRecordNamespaceLister) List(selector labels.Selector) (ret []*v1.DNSRecord, err error) {
	return s.ListWithContext(context.Background(), selector)
}

// ListWithContext lists all DNSRecords in the indexer for a given namespace.
func (s dNSRecordNamespaceLister) ListWithContext(ctx context.Context, selector labels.Selector) (ret []*v1.DNSRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DNSRecord))
	})
	return ret, err
}

// Get retrieves the DNSRecord from the indexer for a given namespace and name.
func (s dNSRecordNamespaceLister) Get(name string) (*v1.DNSRecord, error) {
	return s.GetWithContext(context.Background(), name)
}

// GetWithContext retrieves the DNSRecord from the indexer for a given namespace and name.
func (s dNSRecordNamespaceLister) GetWithContext(ctx context.Context, name string) (*v1.DNSRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dnsrecord"), name)
	}
	return obj.(*v1.DNSRecord), nil
}
